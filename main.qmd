
```{r}
# libraries 

library(readr)

library(ggplot2)
library(jsonlite)
library(dplyr)

library(survival)
library(tidyverse)
library(janitor)
library(survminer)
library(knitr)
```

```{r, warning=FALSE, message=FALSE}
# Filtered Dataset
data <- read_tsv("bladder_cancer_filtered.tsv",
                 show_col_types = FALSE)

data <- data %>% 
  select(-`Study ID`)
```

```{r}
# data summary
head(data)

summary(data)

```

```{r}
# If using the full data, this changes the column names into the default ones.
newnames <- c("patientId", "sampleId", "AGE_AT_DX", "AGE_AT_SEQ_REPORTED_YEARS",
              "CANCER_TYPE", "CANCER_TYPE_DETAILED", "ETHNICITY", "FRACTION_GENOME_ALTERED",
              "GENE_PANEL", "INTRAVESICAL_TREATMENT", "METASTATIC_SITE", "MET_LOCATION",
              "MSI_SCORE", "MSI_TYPE", "MUTATION_COUNT", "ONCOTREE_CODE", "OS_MONTHS",
              "OS_STATUS", "PED_IND", "PRIMARY_SITE", "RACE", "RELIGION", "SAMPLE_CLASS",
              "SAMPLE_COUNT", "SAMPLE_COVERAGE", "SAMPLE_TYPE", "SEX", "SMOKER", "SOMATIC_STATUS",
              "SPECIMEN_STAGE", "SYSTEMIC_TREATMENT", "TMB_NONSYNONYMOUS", "TUMOR_PURITY",
              "TX_BET_PRI_MET_SAMPLE_COLLECTION")

colnames(data) <- newnames
```


## AFT Models

### Cleaning Data
```{r, warning = FALSE}
# sex, MSI score, mutation count of tumor (or fraction of mutated cells), and smoking status
data_mutated <- data %>%
  # Filter out those who died before sequencing
  filter(OS_MONTHS > 0) %>%
  # Change the status column for analysis
  mutate(STATUS = if_else(OS_STATUS == "1:DECEASED", 1, 
                          if_else(OS_STATUS == "0:LIVING", 0, NA_real_))) %>%
  # Clean data types
  mutate(MONTHS = as.numeric(OS_MONTHS), 
         MSI_SCORE = as.numeric(MSI_SCORE),
         MUTATION_COUNT = as.numeric(MUTATION_COUNT),
         FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
         AGE_AT_DX = as.numeric(AGE_AT_DX),
         AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
         INTRAVESICAL_TREATMENT = as.numeric(INTRAVESICAL_TREATMENT),
         SYSTEMIC_TREATMENT = as.numeric(SYSTEMIC_TREATMENT),
         TUMOR_PURITY = as.numeric(TUMOR_PURITY),
         SPECIMEN_STAGE = factor(SPECIMEN_STAGE))%>%
  # Define Treatment Groups
  mutate(INTRAVESICAL_TREATMENT = 
           case_when(
             INTRAVESICAL_TREATMENT == 0 ~ "Naive",
             INTRAVESICAL_TREATMENT == 1 ~ "BCG",
             INTRAVESICAL_TREATMENT == 2 ~ "Chemo",
             INTRAVESICAL_TREATMENT == 3 ~ "Both",
             INTRAVESICAL_TREATMENT == "." ~ NA
             ),
         SYSTEMIC_TREATMENT = 
           case_when(
             SYSTEMIC_TREATMENT == 0 ~ "Naive",
             SYSTEMIC_TREATMENT == 1 ~ "Chemotherapy",
             SYSTEMIC_TREATMENT == 2 ~ "Immunotherapy",
             SYSTEMIC_TREATMENT == 3 ~ "Both",
             SYSTEMIC_TREATMENT == "." ~ NA
           )) %>% 
  # Clean up Race
  mutate(RACE = ifelse(RACE == "PT REFUSED TO ANSWER", NA, RACE)) %>% 
  # Select Predictor of Interest
  select(patientId, MONTHS, STATUS, AGE_AT_DX, 
         RACE, SEX, SMOKER, MSI_SCORE, MUTATION_COUNT, FRACTION_GENOME_ALTERED, 
         GENE_PANEL, SYSTEMIC_TREATMENT, INTRAVESICAL_TREATMENT, SAMPLE_COVERAGE,
         SPECIMEN_STAGE, TUMOR_PURITY) %>% 
  # Filter out NAs
  filter(!is.na(AGE_AT_DX),
         !is.na(RACE),
         !is.na(MSI_SCORE),
         !is.na(MUTATION_COUNT),
         !is.na(TUMOR_PURITY))

head(data_mutated)
  
```
```{r}
#get ranges

range(data_mutated$MSI_SCORE)
range(data_mutated$MUTATION_COUNT)
range(data_mutated$FRACTION_GENOME_ALTERED)

```

### Fitting AFT models

## Exploring Different Predictors (EDA) 

```{r}
# Visualize scatter plots for individual covariates
data_mutated %>%
  ggplot(aes(x = SEX, y = log(MONTHS))) +
  geom_violin(width = 0.8, alpha = 0.5, fill = "lightblue") +
  geom_boxplot(width = 0.1, alpha = 0.2) +
  labs(x = "Sex", y = "Log of Survival Time (Months)", title = "Distribution of log(Months) by Sex") +
  theme_minimal()

data_mutated %>% 
  mutate(status_cat = ifelse(STATUS == 1, "Failed", "Censored")) %>%
  ggplot(aes(x = log(MSI_SCORE), y = log(MONTHS))) +
  geom_point(aes(shape = status_cat, color = status_cat)) +
  scale_shape_manual(values = c(17, 16)) +
  scale_color_manual(values = c("lightblue", "black")) +
  labs(
    x = "Log(MSI Score)",  # Updated x-axis label
    y = "Log of Survival Time (Months)"  # Updated y-axis label
  ) +
  theme_minimal()

data_mutated %>% 
  mutate(status_cat = ifelse(STATUS == 1, "Failed", "Censored")) %>%
  ggplot(aes(x = log(MUTATION_COUNT), y = log(MONTHS))) +
  geom_point(aes(shape = status_cat, color = status_cat)) +
  scale_shape_manual(values = c(17, 16)) +
  scale_color_manual(values = c("lightblue", "black")) +
  labs(
    x = "Log(Mutation Count)",  # Updated x-axis label
    y = "Log of Survival Time (Months)"  # Updated y-axis label
  ) +
  theme_minimal()

data_mutated %>% 
  mutate(status_cat = ifelse(STATUS == 1, "Failed", "Censored")) %>%
  ggplot(aes(x = log(FRACTION_GENOME_ALTERED), y = log(MONTHS))) +
  geom_point(aes(shape = status_cat, color = status_cat)) +
  scale_shape_manual(values = c(17, 16)) +
  scale_color_manual(values = c("lightblue", "black")) 
  labs(
    x = "Log(fraction of genomed altered)",  # Updated x-axis label
    y = "Log of Survival Time (Months)"  # Updated y-axis label
  ) +
  theme_minimal()

data_mutated %>%
  ggplot(aes(x = SMOKER, y = log(MONTHS))) +
  geom_violin(width = 0.8, alpha = 0.5, fill = "lightblue") +
  geom_boxplot(width = 0.1, alpha = 0.2) +
  labs(x = "Smoking Status", y = "log(MONTHS)", title = "Distribution of log(months) by Smoking Status") +
  theme_minimal()

data_mutated %>%
  ggplot(aes(x = INTRAVESICAL_TREATMENT, y = log(MONTHS))) +
  geom_violin(width = 0.8, alpha = 0.5, fill = "lightblue") +
  geom_boxplot(width = 0.1, alpha = 0.2) +
  labs(x = "Intravesical Treatment", y = "log(MONTHS)", title = "Distribution of log(months) by Intravesical Treatment") +
  theme_minimal()

data_mutated %>%
  ggplot(aes(x = SYSTEMIC_TREATMENT, y = log(MONTHS))) +
  geom_violin(width = 0.8, alpha = 0.5, fill = "lightblue") +
  geom_boxplot(width = 0.1, alpha = 0.2) +
  labs(x = "Systemic Treatment", y = "log(MONTHS)", title = "Distribution of log(months) by Systemic Treatment") +
  theme_minimal()

data_mutated %>%
  ggplot(aes(x = RACE, y = log(MONTHS))) +
  geom_violin(width = 0.8, alpha = 0.5, fill = "lightblue") +
  geom_boxplot(width = 0.1, alpha = 0.2) +
  labs(x = "RACE", y = "log(MONTHS)", title = "Distribution of log(months) by Race Group") +
  theme_minimal()

data_mutated %>% 
  mutate(status_cat = ifelse(STATUS == 1, "Failed", "Censored")) %>%
  ggplot(aes(x = AGE_AT_DX, y = log(MONTHS))) +
  geom_point(aes(shape = status_cat, color = status_cat)) +
  scale_shape_manual(values = c(17, 16)) +
  scale_color_manual(values = c("red", "gray")) +
  theme_minimal()

data_mutated %>% 
  mutate(status_cat = ifelse(STATUS == 1, "Failed", "Censored")) %>%
  ggplot(aes(x = TUMOR_PURITY, y = log(MONTHS))) +
  geom_point(aes(shape = status_cat, color = status_cat)) +
  scale_shape_manual(values = c(17, 16)) +
  scale_color_manual(values = c("red", "gray")) +
  theme_minimal()


```

For the three numerical covariates show no clear relationship with the log(months), although this may be due to the large proportion of censored data.


```{r}
# distribution of variables regardless of survival status

# Sex
p1 <- ggplot(data_mutated, aes(x = SEX)) +
  geom_bar( fill = "steelblue",) +
  labs(title = "Distribution by Sex", x = "Sex", y = "Count") +
  theme_minimal()

# Mutation Count
p3 <- ggplot(data_mutated, aes(x = MUTATION_COUNT)) +
  geom_histogram(binwidth = 12.5, color = "black", fill = "steelblue", alpha = 0.7) +
  scale_x_continuous(breaks = seq(0, 250, by = 50)) +  # Set regular x-axis breaks
  labs(title = "Distribution by Mutation Count", x = "Mutation Count", y = "Count") +
  theme_minimal()


# Fraction of genomed altered 
p4 <- ggplot(data_mutated, aes(x = FRACTION_GENOME_ALTERED)) +
  geom_histogram(binwidth = 0.05, color = "black", fill = "steelblue", alpha = 0.7) +
  scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +  # Set regular x-axis breaks
  labs(title = "Distribution by Fraction of Genome Altered", x = "Fraction of Genome Altered", y = "Count") +
  theme_minimal()

# MSI Score 
p5 <- ggplot(data_mutated, aes(x = MSI_SCORE)) +
  geom_histogram(binwidth = 2.5, color = "black", fill = "steelblue", alpha = 0.7) +
  scale_x_continuous(breaks = seq(0, 30, by = 5)) +  # Set regular x-axis breaks  labs(title = "Distribution by MSI Score", x = "MSI Score", y = "Count") +
  theme_minimal()

# Smoker
p2 <- ggplot(data_mutated, aes(x = SMOKER)) +
  geom_bar( fill = "steelblue") +
  labs(title = "Distribution by Smoking Status", x = "Smoking Status", y = "Count") +
  theme_minimal()

# Combine plots using the patchwork library if you want them in a grid
library(patchwork)
combined_plot <- p1 + p2 + p3 + plot_layout(ncol = 2)
print(combined_plot)
combined_plot <-  p4 + p5 + plot_layout(ncol = 2)
print(combined_plot)

```

```{r}
# Kaplan-Meier Plot to visualize survival across groups

# 1. Sex
km_fit <- survfit(Surv(MONTHS, STATUS) ~ SEX, data = data_mutated)
ggsurvplot(km_fit, data = data_mutated, 
           ggtheme = theme_minimal(),
           title = "Kaplan-Meier Curve by Sex",
           legend.title = "Sex",
           legend.labs = c("Female.", "Male"))

# 2. Smoker History
km_fit_smoker <- survfit(Surv(MONTHS, STATUS) ~ SMOKER, data = data_mutated)
ggsurvplot(km_fit_smoker, data = data_mutated, 
           ggtheme = theme_minimal(),
           title = "Kaplan-Meier Curve by Smoking Status",
           legend.title = "Smoking Status",
           legend.labs = c("Active", "Former", "Never"))

# # 3. Mutation count
# data_mutated$MUTATION_COUNT_QUARTILE <- cut(
#   data_mutated$MUTATION_COUNT, 
#   breaks = quantile(data_mutated$MUTATION_COUNT, probs = seq(0, 1, 0.25), na.rm = TRUE),
#   include.lowest = TRUE,
#   labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)")
# )
# km_fit <- survfit(Surv(MONTHS, STATUS) ~ MUTATION_COUNT_QUARTILE, data = data_mutated)
# 
# # Plot Kaplan-Meier curves
# ggsurvplot(km_fit, data = data_mutated,
#            ggtheme = theme_minimal(),
#            title = "Kaplan-Meier Curve by Mutation Count Quartiles",
#            legend.title = "Mutation Count Quartile",
#            legend.labs = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))
# 

# 4. Fraction of Genome Altered
data_mutated$FRACTION_GENOME_QUARTILE <- cut(
  data_mutated$FRACTION_GENOME_ALTERED,
  breaks = quantile(data_mutated$FRACTION_GENOME_ALTERED, probs = seq(0, 1, 0.25), na.rm = TRUE),
  include.lowest = TRUE,
  labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)")
)

km_fit <- survfit(Surv(MONTHS, STATUS) ~ FRACTION_GENOME_QUARTILE, data = data_mutated)

# Plot Kaplan-Meier curves
ggsurvplot(km_fit, data = data_mutated,
           ggtheme = theme_minimal(),
           title = "Kaplan-Meier Curve by Fraction Genome Altered Quartiles",
           legend.title = "Genome Altered Quartile",
           legend.labs = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))# Break MSI_SCORE into quartiles

# 5. MSI Score
data_mutated$MSI_SCORE_QUARTILE <- cut(
  data_mutated$MSI_SCORE, 
  breaks = quantile(data_mutated$MSI_SCORE, probs = seq(0, 1, 0.25), na.rm = TRUE),
  include.lowest = TRUE,
  labels = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)")
)

# Fit Kaplan-Meier model by quartile
km_fit <- survfit(Surv(MONTHS, STATUS) ~ MSI_SCORE_QUARTILE, data = data_mutated)

# Plot Kaplan-Meier curves
ggsurvplot(km_fit, data = data_mutated,
           ggtheme = theme_minimal(),
           title = "Kaplan-Meier Curve by MSI Score Quartiles",
           legend.title = "MSI Score Quartile",
           legend.labs = c("Q1 (Lowest)", "Q2", "Q3", "Q4 (Highest)"))


```

The active smoker seem to have a lower survival probability at a given time comparing to the two other groups. 
Female seem to have a lower survival probability at a given time compare to male.


## Comparing Different AFT Model Fit

```{r}
fit.weib <- survreg(Surv(MONTHS, STATUS)~1, data=data_mutated, dist='weibull') 
fit.exp <- survreg(Surv(MONTHS, STATUS)~1, data=data_mutated, dist="exponential") 
fit.lognm <- survreg(Surv(MONTHS, STATUS)~1, data=data_mutated, dist="lognormal")
fit.loglogistic <- survreg(Surv(MONTHS, STATUS)~1, data=data_mutated, dist="loglogistic")
```

```{r}
fit.km <- survfit(Surv(MONTHS, STATUS)~1, data=data_mutated, conf.int=FALSE) 
time <- fit.km$time

source("helper_functions_predict_survival_probabilities.R")

dat_wide <- tibble(t = fit.km$time,
                   .km_surv=fit.km$surv, 
                   weib_surv = 
                     predict_survival_weibull(object = fit.weib, 
                                              newdat=tibble(z=NA), t=t),
                   exp_surv = 
                     predict_survival_exponential(object = fit.exp,
                                                  newdat=tibble(z=NA), t=t),
                   loglogistic_surv = 
                     predict_survival_loglogistic(object = 
                                                    fit.loglogistic,
                                                  newdat=tibble(z=NA), t=t),
                   lognorm_surv = 
                     predict_survival_lognormal(object = fit.lognm, 
                                                newdata = tibble(z=NA), t=t))
dat <- dat_wide |>
  pivot_longer(cols=c(.km_surv, weib_surv, exp_surv, loglogistic_surv, lognorm_surv),
               names_to="model", values_to="surv")

dat_parametric <- dat |> filter(model %in% c("weib_surv", "exp_surv",
                                             "loglogistic_surv", "lognorm_surv"))

dat_nonparmetric <- dat |> filter(model == ".km_surv")

dat_parametric |> 
  ggplot(aes(x = t, y = surv, color=model, linetype=model)) +
  geom_line() +
  geom_step(aes(x = t, y = surv, color=model, linetype=model), 
            data=dat_nonparmetric) +
  scale_fill_discrete(breaks = c(".km_surv", "exp_surv", "weib_surv",
                                 "loglogistic_surv", "lognorm_surv")) +
  labs(title="Overall survival for patients with advanced lung cancer",
       x="Time (days)", y="Survival Probability")
```
Log-logistic (or log-normal) model seem to fit the data best.

```{r}
dat_wide |>
  pivot_longer(cols=c(weib_surv, exp_surv, loglogistic_surv, lognorm_surv),
               names_to="model", values_to="surv") |>
  mutate(model = case_when(model == "exp_surv" ~ "Exponential",
                           model == "loglogistic_surv" ~ "Log-logistic", 
                           model == "lognorm_surv" ~ "Lognormal", 
                           model == "weib_surv" ~ "Weibull"),
         model = factor(model, levels=c("Exponential", "Weibull",
                                        "Lognormal", "Log-logistic"))) |>
  ggplot(aes(x = .km_surv, y = surv, color=model)) + 
  geom_point() + 
  geom_abline(intercept = 0, slope = 1, linetype=2) +
  facet_wrap(~model)

```
Log-normal seem to fit the data best. Log-logistic follow close second.

```{r}
km <- survfit(Surv(MONTHS, STATUS) ~ 1, data = data_mutated)

dat <- tibble(
  time = rep(km$time, 3),
  surv = rep(km$surv, 3),
  psi_inverse_surv = c(
    log(-log(km$surv)),                # Weibull
    qnorm(1 - km$surv),                # Log-normal
    log((1 - km$surv) / km$surv)       # Log-logistic
  ),
  model = rep(c("weibull", "lognormal", "loglogistic"), each = length(km$time))
) %>%
  mutate(model = factor(model, levels = c("weibull", "lognormal", "loglogistic")))

dat %>%
  ggplot(aes(x = log(time), y = psi_inverse_surv, color = model, group = model)) +
  geom_point() +
  ylab(expression(paste(G^{-1}, "(S(t))"))) +
  xlab(expression(log(t))) +
  geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
  facet_grid(~model) +
  labs(title = "Comparison of parametric fits") +
  theme_minimal()

```
Log-normal seem to fit the data best.

```{r}
# Break into female and male
km_male <- survfit(Surv(MONTHS, STATUS) ~ 1, data = data_mutated, subset = (SEX == "Male"))
km_female <- survfit(Surv(MONTHS, STATUS) ~ 1, data = data_mutated, subset = (SEX == "Female"))

dat2 <- tibble(
  time = rep(c(km_male$time, km_female$time), 3),
  surv = rep(c(km_male$surv, km_female$surv), 3),
  sex = rep(c(rep("Male", length(km_male$time)), rep("Female", length(km_female$time))), 3),
  psi_inverse_surv = c(
    log(-log(c(km_male$surv, km_female$surv))),                # Weibull
    qnorm(1 - c(km_male$surv, km_female$surv)),                # Log-normal
    log((1 - c(km_male$surv, km_female$surv)) / c(km_male$surv, km_female$surv)) # Log-logistic
  ),
  model = rep(c("weibull", "lognormal", "loglogistic"), each = length(c(km_male$time, km_female$time)))
) %>%
  mutate(
    model = factor(model, levels = c("weibull", "lognormal", "loglogistic"))
  )

dat2 %>%
  ggplot(aes(x = log(time), y = psi_inverse_surv, col = model, group = sex, shape = sex)) +
  geom_point() +
  ylab(expression(paste(G^{-1}, "(S(t))"))) +
  xlab(expression(log(t))) +
  geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
  facet_grid(~model) +
  labs(title = "Comparison of parametric fits with a categorical predictor") +
  theme_minimal()

```
Lognormal seems to fit best.

```{r}
# break into different smoking group
km_active <- survfit(Surv(MONTHS, STATUS) ~ 1, data = data_mutated, subset = (SMOKER == "Active"))
km_former <- survfit(Surv(MONTHS, STATUS) ~ 1, data = data_mutated, subset = (SMOKER == "Former"))
km_never <- survfit(Surv(MONTHS, STATUS) ~ 1, data = data_mutated, subset = (SMOKER == "Never"))

dat_smoker <- tibble(
  time = rep(c(km_active$time, km_former$time, km_never$time), 3),
  surv = rep(c(km_active$surv, km_former$surv, km_never$surv), 3),
  smoker_status = rep(c(
    rep("Active", length(km_active$time)), 
    rep("Former", length(km_former$time)), 
    rep("Never", length(km_never$time)
  )), 3),
  psi_inverse_surv = c(
    log(-log(c(km_active$surv, km_former$surv, km_never$surv))),              # Weibull
    qnorm(1 - c(km_active$surv, km_former$surv, km_never$surv)),              # Log-normal
    log((1 - c(km_active$surv, km_former$surv, km_never$surv)) / c(km_active$surv, km_former$surv, km_never$surv)) # Log-logistic
  ),
  model = rep(c("weibull", "lognormal", "loglogistic"), each = length(c(km_active$time, km_former$time, km_never$time)))
) %>%
  mutate(
    model = factor(model, levels = c("weibull", "lognormal", "loglogistic"))
  )

dat_smoker %>%
  ggplot(aes(x = log(time), y = psi_inverse_surv, col = model, group = smoker_status, shape = smoker_status)) +
  geom_point() +
  ylab(expression(paste(G^{-1}, "(S(t))"))) +
  xlab(expression(log(t))) +
  geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
  facet_grid(~model) +
  labs(title = "Comparison of parametric fits by smoker status (Active, Former, Never)") +
  theme_minimal()


```
Lognormal seems to fit best again. We would likely expect to seem similar patterns for the other categorical variables. Hence, we are going to settle with the lognormal model for this analysis.

## Model Fitting

Let's begin by fitting a full model with all predictors we are intersted in to see which seemed significant in predicting survival time of bladder cancer patients.

```{r}
# Model 1: Full Model (Lognormal AFT)
model1 <- survreg(Surv(MONTHS, STATUS) ~ SEX + MSI_SCORE + MUTATION_COUNT + FRACTION_GENOME_ALTERED + SMOKER,
                  data=data_mutated, dist = "lognormal")
summary(model1)
```

It seems that smoker is the least significant variable, so we are going to exclude smoker.

```{r}
# Only keep age at diag., mutation count, systemic treatment group, 
# intravesical treatment group, and specimen stage

# Model 2
model2 <- survreg(Surv(MONTHS, STATUS) ~ SEX + MSI_SCORE + MUTATION_COUNT + FRACTION_GENOME_ALTERED,
                  data = data_mutated, dist = "lognormal")

summary(model2)

```

It seems that MSI_SCORE is the least significant variable, so we are going to exclude MSI score

```{r}
# Try to remove intravesical treatment

# Model 3
model3 <- survreg(Surv(MONTHS, STATUS) ~ SEX + MUTATION_COUNT + FRACTION_GENOME_ALTERED,
                  data = data_mutated, dist = "lognormal")

summary(model3)
```

It seems that sex is the least significant variable, so we are going to exclude sex

```{r}
# Model 4
model4 <- survreg(Surv(MONTHS, STATUS) ~ MUTATION_COUNT + FRACTION_GENOME_ALTERED,
                  data = data_mutated, dist = "lognormal")

summary(model4)
```
Try only have one covariate, muatation count
```{r}
# Model 5
model5 <- survreg(Surv(MONTHS, STATUS) ~ MUTATION_COUNT,
                  data = data_mutated, dist = "lognormal")

summary(model5)
```

```{r}
lr_summary_aft <- 
  tibble(model=c(1,2,3, 4, 5),
         n_param = c(25, 12, 9, 6, 4),
         loglik = c(model1$loglik[2], 
                    model2$loglik[2], 
                    model3$loglik[2], 
                    model4$loglik[2], 
                    model5$loglik[2]),
         CompToModel=c(NA, 1, 2, 3, 4),
         obsLRstat=c(NA,
                     2*(model1$loglik[2] - model2$loglik[2]),
                     2*(model2$loglik[2] - model3$loglik[2]),
                     2*(model3$loglik[2] - model4$loglik[2]),
                     2*(model4$loglik[2] - model5$loglik[2])),
         df_for_comp = c(NA, 25-12, 12-9, 9-6, 6-4),
         pvalue = c(NA,
                    pchisq(2*(model1$loglik[2] - model2$loglik[2]),
                           df=13, lower.tail=FALSE),
                    pchisq(2*(model2$loglik[2] - model3$loglik[2]),
                           df=3, lower.tail=FALSE),
                    pchisq(2*(model3$loglik[2] - model4$loglik[2]),
                           df=3, lower.tail=FALSE),
                    pchisq(2*(model4$loglik[2] - model5$loglik[2]),
                           df=2, lower.tail=FALSE)))

kable(lr_summary_aft)
```

We can conduct the Likelihood Ratio Test to compare the models previously fitted. The hypothesis (and its conclusion) can be defined as follow for each of the p-value obtained...

$H_0:$ Model 2 is a sufficiently good fit to the data vs $H_A:$ Model 1 better fits the data.

At 5% significance, we have no evidence against the null hypothesis that Model 2 is better than Model 1. So, Model 2 seems sufficient enough to model the data. 

$H_0:$ Model 3 is a sufficiently good fit to the data vs $H_A:$ Model 2 better fits the data.

At 5% significance, we have no evidence against the null hypothesis that Model 3 is better than Model 2. So, Model 3 seems sufficient enough to model the data. 

$H_0:$ Model 4 is a sufficiently good fit to the data vs $H_A:$ Model 3 better fits the data.

At 5% significance, we have no evidence against the null hypothesis that Model 4 is better than Model 3. So, Model 4 seems sufficient enough to model the data. 

$H_0:$ Model 5 is a sufficiently good fit to the data vs $H_A:$ Model 4 better fits the data.

At 5% significance, we have strong evidence against the null hypothesis. So, Model 4 better fits the data

Hence, based on these comparisons, we might want to consider Model 4 to balance out both significance and avoid over-fitting.

### Residual Analysis

Note that since the model is log-normal, we know that the Cox-Snell residuals are defined as such...

$$\hat{r_i} = H(x_i; \: z_i, \hat{\beta}) + 1 +\delta_i= -log[1 - \Phi(\frac{log(x_i) - \beta^Tz_i}{\tau})] + 1 + \delta_i$$

Note here that the $\Phi(\cdot)$ represents the c.d.f. of the standard normal distribution, $x_i = min(t_i, c_i)$, and ... (fill out later) ... .

```{r}
# Extract parameter estimates from Model 1
beta_hat <- model4$coef
alpha <- beta_hat[1] +
  beta_hat[2] * data_mutated$MUTATION_COUNT +
  beta_hat[3] * data_mutated$FRACTION_GENOME_ALTERED

tau <- model1$scale
t <- data_mutated$MONTHS
delta <- data_mutated$STATUS

# Compute Cox-Snell residuals
cs.residuals <- -log(1 - pnorm((log(t) - alpha)/tau)) + 1 - delta

# Add residuals to the dataset for plotting
data_res <- data_mutated %>%
  mutate(cs_residuals = cs.residuals)

# 1. Plot residuals vs SEX
ggplot(data_res, aes(x = MUTATION_COUNT, y = cs_residuals)) +
  geom_point() +
  labs(title = "Cox-Snell Residuals by SEX", x = "SEX", y = "Cox-Snell Residuals") +
  theme_minimal()

# 2. Plot residuals vs SMOKER
ggplot(data_res, aes(x = FRACTION_GENOME_ALTERED, y = cs_residuals)) +
  geom_point() +
  labs(title = "Cox-Snell Residuals by SMOKER", x = "SMOKER", y = "Cox-Snell Residuals") +
  theme_minimal()

# 3. Compare residuals to an exponential distribution
# Histogram of residuals
ggplot(data_res, aes(x = cs_residuals)) +
  geom_histogram(aes(y = ..density..), bins = 20, fill = "blue", alpha = 0.5) +
  stat_function(fun = dexp, args = list(rate = 1), color = "red", linetype = "dashed") +
  labs(title = "Histogram of Cox-Snell Residuals vs Exponential(1)",
       x = "Cox-Snell Residuals", y = "Density") +
  theme_minimal()

# 4. Summary statistics for residuals
cat("Mean of residuals:", mean(cs.residuals), "\n")
cat("Expected mean under EXP(1): 1\n")
cat("90th quantile of residuals:", quantile(cs.residuals, 0.9), "\n")
cat("Expected 90th quantile under EXP(1):", -log(1 - 0.9), "\n")
```

Unfortunately, it seems that while the average of the C-S residuals are consistent with the Exp(1) distribution, the distribution does NOT follow. We should, therefore, consider other approaches to this model. We checked if other parametric form solve this problem, and we also considered more covariates and interaction between covariates. However, more covariates only complicate the model but does not seem to improve the fit to the data. Therefore, we can see that the parametric model approach can not create a model that fit the data well. Therefore, we proceed to see if the COX PH model is any better


## COX/PH Model

### Checking potential violations of PH assumptions across groups.

```{r, warning=FALSE, fig.width= 12, fig.height=4.5, fig.align='center'}
# PH Assumption Check (Smoker)
km_smoker_active <- survfit(Surv(MONTHS, STATUS) ~ 1, data=data_mutated,
                            subset = (SMOKER == "Active"))
km_smoker_former <- survfit(Surv(MONTHS, STATUS) ~ 1, data=data_mutated,
                            subset = (SMOKER == "Former"))
km_smoker_never <- survfit(Surv(MONTHS, STATUS) ~ 1, data=data_mutated,
                            subset = (SMOKER == "Never"))

tibble(time = c(km_smoker_active$time, km_smoker_former$time, km_smoker_never$time),
       surv = c(km_smoker_active$surv, km_smoker_former$surv, km_smoker_never$surv),
       group = c(rep("Active", length(km_smoker_active$time)), 
                 rep("Former", length(km_smoker_former$time)),
                 rep("Never", length(km_smoker_never$time)))
       ) %>% 
  ggplot(aes(x = log(time), y = log(-log(surv)), 
             colour = factor(group), group = group)) +
  geom_step() +
  labs(x = "Log Survival Time",
       y = "Log Cummulative Hazard",
       colour = "Smoker Status",
       )
```

We see that there's quite a significant violation of the proportional hazard assumption with respect to the smoker status. We see that the log cumulative hazard line crosses with each other which signify that the proportional hazard assumption is violated.

```{r, warning=FALSE, fig.width= 12, fig.height=4.5, fig.align='center'}
# PH Assumption Check (Sex)
km_sex_male <- survfit(Surv(MONTHS, STATUS) ~ 1, data=data_mutated,
                            subset = (SEX == "Male"))
km_sex_female <- survfit(Surv(MONTHS, STATUS) ~ 1, data=data_mutated,
                            subset = (SEX == "Female"))

tibble(time = c(km_sex_male$time, km_sex_female$time),
       surv = c(km_sex_male$surv, km_sex_female$surv),
       group = c(rep("Male", length(km_sex_male$time)), 
                 rep("Female", length(km_sex_female$time)))
       ) %>% 
  ggplot(aes(x = log(time), y = log(-log(surv)), 
             colour = factor(group), group = group)) +
  geom_step() +
  labs(x = "Log Survival Time",
       y = "Log Cummulative Hazard",
       colour = "Sex",
       )
```

Similarly to the previous graph, we observe that the proportional hazard assumption appears to be broken as well with respect to the patients' sex. However, it seems that the violation was not too severe which could somewhat suggest that the proportional hazard was not violated. In relation to both of these observations, we might want to stratify with respect to both smoker status and sex.

### Fitting COX models

```{r}
data_mutated <- data_mutated %>% 
  mutate(SYSTEMIC_TREATMENT = factor(SYSTEMIC_TREATMENT))
```

```{r}
# Model 1: Include ALL variables of interest
model_cox_1 <- coxph(Surv(MONTHS, STATUS) ~ MUTATION_COUNT + FRACTION_GENOME_ALTERED +
                                    SEX + MSI_SCORE + SMOKER,
                  data= data_mutated)
summary(model_cox_1)
```

Note that the estimated coefficients does not really make sense in this model. Some coefficients have value of >10 which does not make sense in an exponential model.

```{r}
# Model 2: Simplified Model
# Remove MSI Score
model_cox_2 <- coxph(Surv(MONTHS, STATUS) ~ MUTATION_COUNT + FRACTION_GENOME_ALTERED +
                       SEX + SMOKER,
                  data=data_mutated)
summary(model_cox_2)
```

```{r}
# Model 3: Simplified Model
# Remove Smoker History 
model_cox_3 <- coxph(Surv(MONTHS, STATUS) ~ MUTATION_COUNT + FRACTION_GENOME_ALTERED +
                       SEX,
                  data=data_mutated)
summary(model_cox_3)
```

```{r}
# Model 4: Simplified Model
# Remove Sex 
model_cox_4 <- coxph(Surv(MONTHS, STATUS) ~ MUTATION_COUNT + FRACTION_GENOME_ALTERED,
                  data=data_mutated)
summary(model_cox_4)
```

### Choose Best Model 

```{r}
lr_summary_cox <- 
  tibble(model=c(1, 2, 3, 4),
         n_param = c(6, 5, 3, 2),
         loglik = c(model_cox_1$loglik[2], 
                    model_cox_2$loglik[2], 
                    model_cox_3$loglik[2], 
                    model_cox_4$loglik[2]),
         CompToModel=c(NA, 1, 2, 3),
         obsLRstat=c(NA,
                     2*(model_cox_1$loglik[2] - model_cox_2$loglik[2]),
                     2*(model_cox_2$loglik[2] - model_cox_3$loglik[2]),
                     2*(model_cox_4$loglik[2] - model_cox_3$loglik[2])),
         df_for_comp = c(NA, 6-5, 5-3, 3-2),
         pvalue = c(NA,
                    pchisq(2*(model_cox_1$loglik[2] - model_cox_2$loglik[2]),
                           df= 6-2, lower.tail=FALSE),
                    pchisq(2*(model_cox_2$loglik[2] - model_cox_3$loglik[2]),
                           df= 5-3, lower.tail=FALSE),
                    pchisq(2*(model_cox_3$loglik[2] - model_cox_4$loglik[2]),
                           df= 3-2, lower.tail=FALSE)))

kable(lr_summary_cox)
```

Similar approaches were taken to compare the Cox PH models as the AFT models. Based on the Likelihood Ratio Tests, it seems that Model 2 seems to be best to model our data. Our final model would then include the covariates of mutation count, fraction genome altered, sex, and smoker status.

```{r}
# Proportion of Individuals Censored
mean(data_mutated$STATUS)
```

The data has a relatively large portion of its data censored with approximately 30% censored. Hence, we would expect the residuals to have an inflated count near zero but would likely be symmetrical.

### PH assumption check

According to the previous check, the proportional hazard assumption appeared to be violated with respect to both smoker and sex. Violations were much more severe for smoker status, so we are going to focus on stratifying over smoker status in this case.

```{r}
# Stratify Model 2 on Smoker Status
model_cox_1_strata <- coxph(Surv(MONTHS, STATUS) ~ MUTATION_COUNT + FRACTION_GENOME_ALTERED +
                              SEX + strata(SMOKER),
                            data=data_mutated)

summary(model_cox_1_strata)
```

```{r}
# Stratify Model 2 on both Smoker and Sex
model_cox_2_strata <- coxph(Surv(MONTHS, STATUS) ~ MUTATION_COUNT + FRACTION_GENOME_ALTERED +
                              strata(SEX) + strata(SMOKER),
                            data=data_mutated)

summary(model_cox_2_strata)
```

In this final model, both mutation count and fraction genome altered appear to be statistically significant to predicting hazard of death of bladder cancer patients.

```{r}
# Residual Analysis for Model 2

cox.resid <- residuals(model_cox_2, type = "deviance")

# MSI_SCORE + MUTATION_COUNT + FRACTION_GENOME_ALTERED + SMOKER + SEX

# Plot residuals over covariate MSI Score
fig.res1 <- tibble(MSI_SCORE = data_mutated$MSI_SCORE, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = MSI_SCORE, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_point()

# Plot residuals over covariate Mutation Count
fig.res2 <- tibble(MUTATION_COUNT = data_mutated$MUTATION_COUNT, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = MUTATION_COUNT, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_point()

# Plot residuals over covariate Fraction Genome Altered
fig.res3 <- tibble(FRACTION_GENOME_ALTERED = data_mutated$FRACTION_GENOME_ALTERED, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = FRACTION_GENOME_ALTERED, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_point()

# Plot residuals over covariate Smoker Status
fig.res4 <- tibble(SMOKER = data_mutated$SMOKER, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = SMOKER, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_boxplot()

# Plot residuals over covariate Sex
fig.res5 <- tibble(SEX = data_mutated$SEX, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = SEX, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_boxplot()

# Plot with risk score
fig.res6 <- tibble(risk.score = predict(model_cox_2), 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = risk.score, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_point()

# Plot with the Normal Q-Q Plot
fig.res7 <- tibble(residuals = cox.resid) %>% 
  ggplot(aes(x = residuals)) +
  geom_histogram(binwidth = 0.5)
  
ggarrange(fig.res1, fig.res2, fig.res3,
          fig.res4, fig.res5, fig.res6,
          fig.res7, ncol = 3, nrow = 3)

qqnorm(cox.resid)
abline(0, 1, lty = 2)
```

```{r}
# Residual Analysis for Model 2 (Stratified on Sex and Smoker Status)

cox.resid <- residuals(model_cox_2_strata, type = "deviance")

# MSI_SCORE + MUTATION_COUNT + FRACTION_GENOME_ALTERED

# Plot residuals over covariate MSI Score
fig.res1 <- tibble(MSI_SCORE = data_mutated$MSI_SCORE, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = MSI_SCORE, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_point()

# Plot residuals over covariate Mutation Count
fig.res2 <- tibble(MUTATION_COUNT = data_mutated$MUTATION_COUNT, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = MUTATION_COUNT, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_point()

# Plot residuals over covariate Fraction Genome Altered
fig.res3 <- tibble(FRACTION_GENOME_ALTERED = data_mutated$FRACTION_GENOME_ALTERED, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = FRACTION_GENOME_ALTERED, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_point()

# Plot residuals over covariate Smoker Status
fig.res4 <- tibble(SMOKER = data_mutated$SMOKER, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = SMOKER, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_boxplot()

# Plot residuals over covariate Sex
fig.res5 <- tibble(SEX = data_mutated$SEX, 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = SEX, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_boxplot()

# Plot with risk score
fig.res6 <- tibble(risk.score = predict(model_cox_2_strata), 
                    residuals = cox.resid) %>% 
  ggplot(aes(x = risk.score, y = residuals)) +
  geom_hline(yintercept = 0, linetype = 2) +
  geom_point()

# Plot with the Normal Q-Q Plot
fig.res7 <- tibble(residuals = cox.resid) %>% 
  ggplot(aes(x = residuals)) +
  geom_histogram(binwidth = 0.5)
  
ggarrange(fig.res1, fig.res2, fig.res3,
          fig.res4, fig.res5, fig.res6,
          fig.res7, ncol = 3, nrow = 3)

qqnorm(cox.resid)
abline(0, 1, lty = 2)
```

### Obtain performance amongst different smoker status of male patients with all other median valued covariates

```{r}
newdata <- data.frame(
  FRACTION_GENOME_ALTERED = rep(median(data_mutated$FRACTION_GENOME_ALTERED), 3),
  MUTATION_COUNT = rep(median(data_mutated$MUTATION_COUNT), 3),
  SEX = rep("Male", 3),
  SMOKER = c("Active", "Former", "Never")
)

# Use survfit to compute survival curves
sf_cox <- survfit(model_cox_2_strata, newdata = newdata, data = data_mutated)

# Plot survival curves using ggsurvplot
ggsurvplot(sf_cox, 
           conf.int = FALSE,        # No confidence intervals
           censor.shape = "+",      # Censor symbol
           risk.table = FALSE,      # Don't show the risk table
           legend.title = "",       # No title for legend
           legend.labs = c("Active", "Former", "Never"), # Labels for the survival curves
           title = "Estimated Survival Curves for each Specimen stage") # Plot title
```

### Obtain performance for different sex groups on patients who are active smokers with median values of other covariates 
 
```{r}
newdata <- data.frame(
  FRACTION_GENOME_ALTERED = rep(median(data_mutated$FRACTION_GENOME_ALTERED), 2),
  MUTATION_COUNT = rep(median(data_mutated$MUTATION_COUNT), 2),
  SEX = c("Male", "Female"),
  SMOKER = rep("Active", 2)
)

# Use survfit to compute survival curves
sf_cox <- survfit(model_cox_2_strata, newdata = newdata, data = data_mutated)

# Plot survival curves using ggsurvplot
ggsurvplot(sf_cox, 
           conf.int = FALSE,        # No confidence intervals
           censor.shape = "+",      # Censor symbol
           risk.table = FALSE,      # Don't show the risk table
           legend.title = "",       # No title for legend
           legend.labs = c("Male", "Female"), # Labels for the survival curves
           title = "Estimated Survival Curves for each Sex Group") # Plot title
```

```{r}
newdata <- data.frame(
  FRACTION_GENOME_ALTERED = median(data_mutated$FRACTION_GENOME_ALTERED),
  MUTATION_COUNT = median(data_mutated$MUTATION_COUNT),
  SMOKER = "Active"
)

fit.strat.cumHaz <- survfit(model_cox_2_strata, type = "aalen",
                            new.data = data.frame(
                              FRACTION_GENOME_ALTERED = median(data_mutated$FRACTION_GENOME_ALTERED),
                              MUTATION_COUNT = median(data_mutated$MUTATION_COUNT))
                            ) %>% 
  summary()

temp <- tibble(time = fit.strat.cumHaz$time,
               strata = fit.strat.cumHaz$strata,
               surv = fit.strat.cumHaz$surv,
               cumhaz = fit.strat.cumHaz$cumhaz)

temp %>% 
  ggplot(aes(x = log(time), y = log(cumhaz), color = strata, lty = strata)) +
  geom_step() +
  xlab("log(t)") +
  ylab("log H(t)") +
  theme(legend.position = "right")
```

Looking at the plot above, we can see that the proportional hazard assumption is indeed violated.


